package database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class MySQLDatabase
{
    //Connection data
    private final String host;
    private final int port;
    private final String databaseName;
    private final String user;
    private final String password;

    //Established connection with the database
    private static Connection connection = null;

    //Is the driver class initialized
    private static boolean initialized = false;

    /**
     * Constructor
     * @param host Database host
     * @param port Database listening port
     * @param databaseName Database name
     * @param user Database user
     * @param password Database user's password
     * @throws SQLException
     */
    public MySQLDatabase(String host, int port, String databaseName, String user, String password) throws SQLException
    {
        this.host = host;
        this.port = port;
        this.databaseName = databaseName;
        this.user = user;
        this.password = password;

        this.connect();
    }

    /**
     * Initializes JDBC driver
     */
    private static void initialize()
    {
        if (MySQLDatabase.initialized == false)
        {
            try
            {
                Class.forName("com.mysql.cj.jdbc.Driver");
                MySQLDatabase.initialized = true;
            }
            catch (ClassNotFoundException exception)
            {
                System.err.println("Unable to load MySQL driver.");
            }
        }
    }

    /**
     * Opens a connection to the database
     * @throws SQLException
     */
    private void connect() throws SQLException
    {
        MySQLDatabase.initialize();

        if (MySQLDatabase.connection == null)
            MySQLDatabase.connection = DriverManager.getConnection(String
                    .format("jdbc:mysql://%s:%d/%s?allowMultiQueries=true", this.host, this.port, this.databaseName),
                    user, password);
    }

    /**
     * Creates a prepared statement from the given query
     * @param sqlQuery Query to execute
     * @param autoGeneratedKeys Does the statement returns the collection of created primary keys
     * @return The prepared statement
     * @throws SQLException
     */
    public PreparedStatement prepareStatement(String sqlQuery, int autoGeneratedKeys) throws SQLException
    {
        return MySQLDatabase.connection.prepareStatement(sqlQuery, autoGeneratedKeys);
    }
}
